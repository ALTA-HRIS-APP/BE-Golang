// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	reimbusment "be_golang/klp3/features/reimbusment"

	mock "github.com/stretchr/testify/mock"
)

// ReimbursementData is an autogenerated mock type for the ReimbusmentDataInterface type
type ReimbursementData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ReimbursementData) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *ReimbursementData) Insert(input reimbusment.ReimbursementEntity) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(reimbusment.ReimbursementEntity) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields: token, param
func (_m *ReimbursementData) SelectAll(token string, param reimbusment.QueryParams) (int64, []reimbusment.ReimbursementEntity, error) {
	ret := _m.Called(token, param)

	var r0 int64
	var r1 []reimbusment.ReimbursementEntity
	var r2 error
	if rf, ok := ret.Get(0).(func(string, reimbusment.QueryParams) (int64, []reimbusment.ReimbursementEntity, error)); ok {
		return rf(token, param)
	}
	if rf, ok := ret.Get(0).(func(string, reimbusment.QueryParams) int64); ok {
		r0 = rf(token, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, reimbusment.QueryParams) []reimbusment.ReimbursementEntity); ok {
		r1 = rf(token, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]reimbusment.ReimbursementEntity)
		}
	}

	if rf, ok := ret.Get(2).(func(string, reimbusment.QueryParams) error); ok {
		r2 = rf(token, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectAllKaryawan provides a mock function with given fields: idUser, param
func (_m *ReimbursementData) SelectAllKaryawan(idUser string, param reimbusment.QueryParams) (int64, []reimbusment.ReimbursementEntity, error) {
	ret := _m.Called(idUser, param)

	var r0 int64
	var r1 []reimbusment.ReimbursementEntity
	var r2 error
	if rf, ok := ret.Get(0).(func(string, reimbusment.QueryParams) (int64, []reimbusment.ReimbursementEntity, error)); ok {
		return rf(idUser, param)
	}
	if rf, ok := ret.Get(0).(func(string, reimbusment.QueryParams) int64); ok {
		r0 = rf(idUser, param)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, reimbusment.QueryParams) []reimbusment.ReimbursementEntity); ok {
		r1 = rf(idUser, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]reimbusment.ReimbursementEntity)
		}
	}

	if rf, ok := ret.Get(2).(func(string, reimbusment.QueryParams) error); ok {
		r2 = rf(idUser, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectById provides a mock function with given fields: id
func (_m *ReimbursementData) SelectById(id string) (reimbusment.ReimbursementEntity, error) {
	ret := _m.Called(id)

	var r0 reimbusment.ReimbursementEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (reimbusment.ReimbursementEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) reimbusment.ReimbursementEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(reimbusment.ReimbursementEntity)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserById provides a mock function with given fields: idUser
func (_m *ReimbursementData) SelectUserById(idUser string) (reimbusment.PenggunaEntity, error) {
	ret := _m.Called(idUser)

	var r0 reimbusment.PenggunaEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (reimbusment.PenggunaEntity, error)); ok {
		return rf(idUser)
	}
	if rf, ok := ret.Get(0).(func(string) reimbusment.PenggunaEntity); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(reimbusment.PenggunaEntity)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *ReimbursementData) Update(input reimbusment.ReimbursementEntity, id string) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(reimbusment.ReimbursementEntity, string) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKaryawan provides a mock function with given fields: input, id
func (_m *ReimbursementData) UpdateKaryawan(input reimbusment.ReimbursementEntity, id string) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(reimbusment.ReimbursementEntity, string) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReimbursementData interface {
	mock.TestingT
	Cleanup(func())
}

// NewReimbursementData creates a new instance of ReimbursementData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReimbursementData(t mockConstructorTestingTNewReimbursementData) *ReimbursementData {
	mock := &ReimbursementData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
